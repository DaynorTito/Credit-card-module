package org.company.com.domain.model.payment;

class AutomaticPaymentTest {
//
//
//    /**
//     * Verifies that the list of automatic payments is not empty after initializing MockAutomaticPayment.
//     * Justification: Ensures that the mock initialization generates at least one automatic payment.
//     */
//    @Test
//    void testGetAutomaticPayments() {
//        MockAutomaticPayment mockAutomaticPayment = new MockAutomaticPayment();
//        List<AutomaticPayment> automaticPayments = mockAutomaticPayment.getCollection();
//
//        assertFalse(automaticPayments.isEmpty());
//    }
//
//    /**
//     * Parameterized test that verifies that the fields of each automatic payment in the list are valid.
//     * Justification: Validates that essential fields of each automatic payment are not null, and the monthly repeat date is after the current date.
//     */
//    @ParameterizedTest
//    @MethodSource("provideAutomaticPayments")
//    void testAutomaticPaymentFields(AutomaticPayment payment) {
//        assertNotNull(payment.getId());
//        assertTrue(payment.getAmount() > 0);
//        assertNotNull(payment.getCreditCard());
//        assertNotNull(payment.getAccount());
//        assertNotNull(payment.getStatus());
//        assertNotNull(payment.getRepeatMonthlyAt());
//        assertNotNull(payment.getCreatedAt());
//
//        assertTrue(payment.getRepeatMonthlyAt().isAfter(LocalDate.now()));
//    }
//
//    /**
//     * Source method to provide a stream of automatic payments from MockAutomaticPayment.
//     * Justification: Enables parameterization of the test `testAutomaticPaymentFields`, using data generated by the mock.
//     */
//    private static Stream<AutomaticPayment> provideAutomaticPayments() {
//        MockAutomaticPayment mockAutomaticPayment = new MockAutomaticPayment();
//        return mockAutomaticPayment.getCollection().stream();
//    }
}
